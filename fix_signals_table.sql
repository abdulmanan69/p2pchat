-- Fix script for signals table ID column issue

-- First, check if the table exists and its current structure
-- \d signals;

-- If the ID column is not set up for auto-increment, run these commands:

-- 1. Add a new auto-incrementing ID column
ALTER TABLE signals ADD COLUMN new_id BIGINT GENERATED BY DEFAULT AS IDENTITY;

-- 2. Drop the old primary key constraint
ALTER TABLE signals DROP CONSTRAINT IF EXISTS signals_pkey;

-- 3. Set the new column as primary key
ALTER TABLE signals ADD PRIMARY KEY (new_id);

-- 4. Drop the old id column
ALTER TABLE signals DROP COLUMN id;

-- 5. Rename new_id to id
ALTER TABLE signals RENAME COLUMN new_id TO id;

-- If the above doesn't work due to data constraints, use this alternative approach:

-- Alternative approach if there's data in the table:
-- 1. Create a new table with correct structure
CREATE TABLE signals_new (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    room_id TEXT NOT NULL,
    sender TEXT NOT NULL,
    sender_name TEXT NOT NULL,
    target TEXT,
    type TEXT NOT NULL,
    sdp TEXT,
    candidate TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- 2. Copy data from old table (if any)
-- INSERT INTO signals_new (room_id, sender, sender_name, target, type, sdp, candidate, created_at)
-- SELECT room_id, sender, sender_name, target, type, sdp, candidate, created_at FROM signals;

-- 3. Drop old table
-- DROP TABLE signals;

-- 4. Rename new table
-- ALTER TABLE signals_new RENAME TO signals;

-- 5. Reapply RLS policies
ALTER TABLE signals ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Enable read access for all" 
ON signals FOR SELECT 
USING (true);

CREATE POLICY "Enable insert access for all" 
ON signals FOR INSERT 
WITH CHECK (true);

GRANT ALL ON TABLE signals TO anon;